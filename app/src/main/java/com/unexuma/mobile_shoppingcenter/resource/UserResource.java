/**
 * Health Alerts
 * This application allows users to send and receive information about a user's health condition.
 *
 * OpenAPI spec version: 1.0
 * Contact: info@spilab.es
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.unexuma.mobile_shoppingcenter.resource;


import android.content.Context;
import android.text.TextUtils;
import android.util.Log;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.unexuma.mobile_shoppingcenter.response.UserResponse;
import com.unexuma.mobile_shoppingcenter.service.MQTTService;
import com.unexuma.mobile_shoppingcenter.service.MqttClient;

import org.eclipse.paho.client.mqttv3.MqttException;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.UnsupportedEncodingException;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.util.Arrays;
import java.util.Locale;
import java.util.Random;


public class UserResource {

    private Context context;
    private MqttClient client;

    private static DecimalFormat df2 = new DecimalFormat("0.00",new DecimalFormatSymbols(Locale.ENGLISH));
    private int min=35;
    private int max=40;

    private String[] music = {"pop","rock","jazz","metal","indie","edm","techno","trance","soul","classic","chill","rap","country","reggaeton","hip-hop"};


    private UserResponse userResponse;
    private JSONObject response;

    public UserResource(Context context) {
        this.context = context;
        client = new MqttClient();
        response= new JSONObject();
    }



  public Exception executeMethod (UserResponse response) throws MqttException, UnsupportedEncodingException{

        userResponse =response;

      switch (response.getMethod()){
          case "getTemperature":
           getTemperature();
           break;
          case "getLocation":
              getLocation();
              break;
          case "getMusic":
              getMusic ();
              break;
          default:
              client.publishMessage( MQTTService.getClient(), "Error: Not Found Method",1, userResponse.getSender());
              return new Exception("Not found method.");
      }

      return null;
  }


  /**
  * Gets the environment temperature
  * Obtain current environment temperature
   * @return Double
  */
  public void getTemperature () throws MqttException, UnsupportedEncodingException{

     //TODO: Process the information, etc.



     //TODO: Return Double on body.
      Log.i("ID REQUEST", userResponse.getIdRequest());

      Random r = new Random();
      double random = min + r.nextDouble() * (max - min);
      double temp = Double.valueOf(df2.format(random));
      Log.i("Tmp: ", String.valueOf(temp));

      try {

          response.put("idRequest", userResponse.getIdRequest());
          response.put("devices", userResponse.getDevices());
          response.put("body",temp);
      } catch (JSONException e) {

          e.printStackTrace();
      }

      Log.i("send msg to ", userResponse.getSender()+"|"+response);
      client.publishMessage(MQTTService.getClient(), String.valueOf(response),1, userResponse.getSender());
  }


    /**
     * Gets music preference
     * @return ArrayList
     */
    public void getMusic () throws MqttException, UnsupportedEncodingException{

        //TODO: Return Double on body.
        Log.i("ID REQUEST", userResponse.getIdRequest());

        try {

            response.put("idRequest", userResponse.getIdRequest());
            response.put("devices", userResponse.getDevices());


            Random rand = new Random();
            String[] finalArrayMusic = new String[8];

            for (int i = 0; i < 8 ; i++) {
                finalArrayMusic[i]= music[rand.nextInt(music.length)];
            }

            Gson gson=new GsonBuilder().create();
            String jsonArray=gson.toJson(Arrays.asList(finalArrayMusic));

            response.put("body",jsonArray);

            Log.i("Result", jsonArray);

        } catch (JSONException e) {

            e.printStackTrace();
        }

        Log.i("send msg to ", userResponse.getSender()+"|"+response);
        client.publishMessage(MQTTService.getClient(), String.valueOf(response),1, userResponse.getSender());
    }


    /**
     * Get Location
     * Obtain current location
     * @return Double
     */
    public void getLocation() throws MqttException, UnsupportedEncodingException{

        //TODO: Process the information, etc.



        //TODO: Return User on reply.
        client.publishMessage( MQTTService.getClient(), "getLocation OK",1, userResponse.getSender());
    }




}
